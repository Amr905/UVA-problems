#include<bits/stdc++.h>
using namespace std;
#define ll long long

ll n, m;
//double ans[2];
//bool visted[400000];
//int mp[1000000];
//int arr[4000][4000];
//pair<int,int>dp[4000];
//vector < pair<ll, ll>> vec;
//bool withus[21];
//map<pair<int,int>,int >arr;
//char arr[40001][40001];
//string res[3] = { "Carrots","Kiwis","Grapes" };
//set <string> res;
int csum = 0;
//char arr[300];
bool backtrack(int ind = 1, int sum = 0) {
	if (ind == m) {

		return true;
	}
	if (ind == n) return 0;
	//	backtrack(ind + arr[ind]);
		//backtrack(ind + 1);

}
bool valid(int x, int y) {
	return x >= 0 && y >= 0 && x <= 1025 && y <= 1025;
}

vector<pair<int, int>>vec;
int grid[1026][1026];
//int far[1026][1026];
int main() {
	ios_base::sync_with_stdio(false); cin.tie(0), cout.tie(0);
	long long   a = 0, b = 0, c = 0, t, lj = 0, k = 0, r = 0, l = 0, sum = 0, rr, mn = INT_MAX, mx = INT_MIN;// , w, y, x,d;
	string s, s1 = "", s2 = "", s3 = "";
	cin >> t;
	int x, y, d;
	while (t--) {
		cin >> d >> n;
		for (int o = 0; o < n; o++)
		{
			cin >> x >> y >> a;
			//grid[x][y] = a;
			for ( int i = 0; i <= min(x+d,1025); i++)
				for (int j = 0; j <= min(y + d, 1025); j++)
				{
					if (max(abs(i-x), abs(j-y)) <= d)
						grid[i][j] += a;
					if (grid[i][j] > mx)
						mx = grid[i][j], l = i, r = j, c = mx;
				}
		}
		cout << l << " " << r << " " << c << endl;
		memset(grid, 0, sizeof(grid));
		mx = 0;
	}


}